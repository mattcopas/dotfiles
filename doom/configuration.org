#+title: Doom Config

* Stuff that Doom ships with
#+begin_src emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!


;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
(setq user-full-name "John Doe"
      user-mail-address "john@doe.com")

;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
;; (setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
;;       doom-variable-pitch-font (font-spec :family "sans" :size 13))

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type t)


;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.

#+end_src

* My custom stuff
** Mac specific stuff

#+BEGIN_SRC emacs-lisp
;; Disable company auto-suggesting stuff on a mac, because it's causing emacs to freeze a lot
;; Suggestions can still be generated by pressing C-SPC
(if IS-MAC (setq company-idle-delay nil))
#+END_SRC
** Minibuffer stuff

When pasting into the minibuffer (wirth the system paste shortcut) use the system clipboard
Based on [[https://www.reddit.com/r/emacs/comments/sn8pma/how_to_pasteyank_into_minibuffer_input_prompt/][this Stackoverflow post]] and then written using [[https://discourse.doomemacs.org/t/how-to-re-bind-keys/56][Doom's key mapping macro]]
#+BEGIN_SRC emacs-lisp
(if IS-MAC
    (map!
     :map minibuffer-local-map
     "s-v" #'clipboard-yank))
#+END_SRC
** Helpful

#+BEGIN_SRC emacs-lisp
(map!
 :desc "Get Helpful docs for thing at point"
 :map evil-normal-state-map
 :leader
 :n "h h" #'helpful-at-point)
#+END_SRC
** Fonts
#+begin_src emacs-lisp
(when (eq system-type 'windows-nt)
        (setq font-to-use "Cascadia Code")
        (setq doom-font (font-spec :family font-to-use :size 48)
        doom-variable-pitch-font (font-spec :family font-to-use) ; inherits `doom-font''s :size
                doom-unicode-font (font-spec :family font-to-use)
                        doom-big-font (font-spec :family font-to-use)))

(unless (eq system-type 'windows-nt)
  (setq doom-font (font-spec :size 18)))

;; Set bullets for org-mode (requires unicode font, and (org +pretty) in .doom.d/init.el)
(setq
    org-superstar-headline-bullets-list '("⁖" "◉" "○" "✸" "✿"))

#+end_src

** Org Mode
#+begin_src emacs-lisp
;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/git/")
(setq org-journal-dir "~/git/journal/")
; See https://www.gnu.org/software/emacs/manual/html_node/elisp/Time-Parsing.html for docs on date formats
(setq org-journal-file-format "%b-%Y.org")
(setq org-journal-file-type 'monthly)
(setq org-journal-date-format "%a %e %b %Y") ; Mon 1 Jan 2023
; Don't make tasks with subtasks a different colour in org agenda
; Is there a nicer way to mark tasks with subtasks in org agenda?
(setq org-agenda-dim-blocked-tasks nil)
; I used to add all subdirectories in org-directory to org-agenda-files
; But it made org agenda painfully slow.
; The best way to append to this for machine/project specific stuff is orobably in
; org overrides below
;; TODO make this directory a const
(setq me-private-directory "~/git/private-personal")
(setq me-private-personal-directory "~/git/private-personal")
(setq me-private-work-directory "~/git/private-work")
(setq me-org-capture-todo-file (concat me-private-directory "/" ".todo.org"))
(setq me-org-capture-personal-todo-file (concat me-private-personal-directory "/" "todo.org"))
(setq me-org-capture-work-todo-file (concat me-private-work-directory "/" "todo.org"))
;; Note we have to use backquote instead of quote here so that we can evaluate the variables before adding them to the list.
;; See docs for function backquote
(setq org-agenda-files `(,me-private-directory
                         ,me-private-personal-directory
                         ,me-private-work-directory))

;; Auto enable org-fragtog-mode
(add-hook 'org-mode-hook 'org-fragtog-mode)

; Use this to override org stuff (Eg org-capture-todo-file) (eg for specific projects)
(load "~/tools/org-overrides.el" t)


(defun me/org-create-demoted ()
  "Create an item that is indented, relative to the current item."
  (interactive)
  (+org/insert-item-below 1)
  (evil-force-normal-state)
  (org-metaright)
  (evil-append-line 1))


(after! org
  (map! :map org-mode-map
    ;; Remap M-k/j to move items up/down
    :n "M-j" #'org-metadown
    :n "M-k" #'org-metaup
    :ni "C-RET" #'+org/insert-item-below
    :ni "M-RET" #'me/org-create-demoted)

  ;; This fixes the leading stars being shown in org mode!
  ;; The second parameter (t) disables the prompt to load a theme
  (load-theme 'doom-one t))

;; Org agenda stuff

;; This and the below custom commands come from Aaron Beiber's blog post -
;; https://blog.aaronbieber.com/2016/09/24/an-agenda-for-life-with-org-mode.html
;; TODO is it worth replacing this with the package 'org-super-agenda'?
(defun air-org-skip-subtree-if-priority (priority)
"Skip an agenda subtree if it has a priority of PRIORITY.

PRIORITY may be one of the characters ?A, ?B, or ?C."
  (let ((subtree-end (save-excursion (org-end-of-subtree t)))
      (pri-value (* 1000 (- org-lowest-priority priority)))
      (pri-current (org-get-priority (thing-at-point 'line t))))
  (if (= pri-value pri-current)
      subtree-end
    nil)))

;; In org agenda, dont show subtasks by default. This can  be overridden for individual agenda views/sections -
;; see the 'settings' section of the docs for org-agenda-custom-commands for details on overriding variables
(setq org-tags-match-list-sublevels nil)

(setq org-agenda-custom-commands
      '(("c" "Simple agenda view"
          ((tags "PRIORITY=\"A\""
                ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                  (org-agenda-overriding-header "High priority unfinished tasks")))
          (agenda "")
          (alltodo ""
                    ((org-agenda-skip-function
                      '(or (air-org-skip-subtree-if-priority ?A)
                          ; is the nil condition needed here?
                          (org-agenda-skip-if nil '(scheduled deadline))))))))

        ("w" "Work agenda view"
                  ((tags "+work+PRIORITY=\"A\""
                        ((org-agenda-skip-function '(org-agenda-skip-entry-if
                                                     'todo '("WAIT" "KILL" "DONE")))
                          (org-agenda-overriding-header "High priority unfinished tasks")))
                  (tags-todo  "+work"
                        ((org-agenda-skip-function '(org-agenda-skip-entry-if
                                                     'todo '("TODO" "IN PROGRESS" "KILL" "DONE")))
                          (org-agenda-overriding-header "Blocked tasks")))
                  (agenda "")
                  (tags-todo "+work"
                            ((org-agenda-skip-function
                              '(or (air-org-skip-subtree-if-priority ?A)
                                   (org-agenda-skip-entry-if 'nottodo '("TODO" "IN PROGRESS"))
                                  ; is the nil condition needed here?
                                  (org-agenda-skip-if nil '(scheduled deadline))))))))

        ("p" "Personal agenda view"
                  ((tags "+personal+PRIORITY=\"A\""
                        ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                          (org-agenda-overriding-header "High priority unfinished tasks")))
                  (agenda "")
                  (tags-todo "+personal"
                            ((org-agenda-skip-function
                              '(or (air-org-skip-subtree-if-priority ?A)
                                   (org-agenda-skip-entry-if 'todo 'done)
                                  ; is the nil condition needed here?
                                  (org-agenda-skip-if nil '(scheduled deadline))))))))))

;; Org capture stuff
; To see the original value of this (to see examples) comment this out and describe the variable
(defun me-basic-todo-format ()
  "Function returning a basic todo format. Note that the docs for org-capture-templates requirse the template parameter to be literal or a function returning a template"
  "* TODO %?")

(setq org-capture-templates '(("t" "Todo" entry (file+headline me-org-capture-todo-file "Todo list") (function me-basic-todo-format))
                              ("p" "Personal Todo" entry (file+headline me-org-capture-personal-todo-file "Todo list") (function me-basic-todo-format) :prepend t)
                              ("w" "Work Todo" entry (file+headline me-org-capture-work-todo-file "Todo list") (function me-basic-todo-format) :prepend t)))

; Org task statuses
(setq org-todo-keywords
      '((sequence "TODO(t)" "IN PROGRESS(p)" "IN REVIEW(r)" "LOOP" "STRT(s)" "WAIT(w)" "HOLD(h)" "IDEA(i)" "|" "DONE(d)" "KILL(k)")
        (sequence "[ ](T)" "[-](S)" "[?](W)" "|" "[X](D)")
        (sequence "|" "OKAY(o)" "YES(y)" "NO(n)")))

#+end_src

** Vertico
#+begin_src emacs-lisp

(after! vertico
  ; For some reason +vertico/project-search doesn't work, so make sure consult-grep (installed with vertico) is used instead
  (let (me/search-function)
    (if (executable-find "rg")
        (setq me/search-function #'consult-ripgrep)
      (setq me/search-function #'consult-grep))

    (map! :leader :n
          "/" me/search-function
          "s p" me/search-function)))

#+end_src

** GUI specific stuff
#+begin_src emacs-lisp
(when (window-system)
  (load (concat dotfiles-doom-directory "gui-config.el")))

#+end_src

** Projectile
#+begin_src emacs-lisp
(after! projectile
  (setq projectile-project-search-path '("~/git"))
  (setq projectile-enable-caching nil)

  (defun me/projectile-discover-with-subprojects ()
    "Discover projects in PROJECTILE-PROJECT-SEARCH-PATH at a depthg of 2.
This is to allow for things like sub repositories and in particular git worktrees to be discovered.
Note this could also be added to the projectile-project-search-path by setting a value (\"path/to/folder\" . 1)"
    (interactive)
    (dolist (search-path projectile-project-search-path)
      (projectile-discover-projects-in-directory search-path 1))))

#+end_src
** LSP Mode
#+begin_src emacs-lisp
;; Keybinds to make emacs feel a bit more like intellij
(after! lsp-mode
  (map! :map lsp-mode-map
        :n "M-RET" 'lsp-execute-code-action
        :leader :n
                "E" 'flycheck-previous-error
                "e" 'flycheck-next-error
                "B" 'dap-breakpoint-toggle
                "F" 'consult-imenu
                        (:prefix "v"
                                :desc "Goto definition" "i" '+lookup/implementations
                                :desc "Find usages" "u" 'lsp-find-references)
                        (:prefix "r"
                                 :desc "Rename at point" "r" 'lsp-rename))

        (setq me/lombok-jar-path
                (substitute-env-vars "$HOME/.gradle/caches/modules-2/files-2.1/org.projectlombok/lombok/1.18.20/18bcea7d5df4d49227b4a0743a536208ce4825bb/lombok-1.18.20.jar"))
        (setq lsp-java-vmargs `(
                "-noverify"
                "-XX:+UseParallelGC"
                "-XX:GCTimeRatio=4"
                "-XX:AdaptiveSizePolicyWeight=90"
                "-Dsun.zip.disableMemoryMapping=true"
                "-Xmx1G"
                "-Xms100m"
                "--add-opens" "java.base/java.lang=ALL-UNNAMED"
                ,(concat "-Xbootclasspath/a:" me/lombok-jar-path)
                ,(concat "-javaagent:" me/lombok-jar-path)
                )))

#+end_src
** Code formatting

#+BEGIN_SRC emacs-lisp
;; Note this requires the most recent doom modules version (as of 17/9/23)
;; TODO Can probably remove this check in the near future
(unless (string< doom-modules-version "23.0.9-pre")
  (add-to-list '+format-on-save-disabled-modes 'mhtml-mode  t))
#+END_SRC
** Feature Mode

#+BEGIN_SRC emacs-lisp
(after! feature-mode
  (map! :map feature-mode-map
       (:n "gd" #'feature-goto-step-definition))
  (setq feature-step-search-path "**/*.rb"))
#+END_SRC
** Magit

#+BEGIN_SRC emacs-lisp
(map!
 :desc "Magit log"
 :leader
 :n "gl" #'magit-log)
#+END_SRC
** VTerm

Speed up vterm
#+BEGIN_SRC emacs-lisp
(setq vterm-timer-delay 0.01)
#+END_SRC
** Little quality of life changes

#+begin_src emacs-lisp

; Add .ideavimrc to vimrc mode list
(after! vimrc-mode
        (add-to-list 'auto-mode-alist '(".ideavimrc" . vimrc-mode)))

; When selecting, deleting etc, don't copy to clipboard
; Use "+y to copy to clpboard
(setq x-select-enable-clipboard nil)

;; map Leader-w to save
(map!
 :desc "Save file"
 :leader
 :n "w" #'evil-write)

; Keybinds for commenting
(map! :desc "Comment region based on mode"
      :n "C-/" #'comment-or-uncomment-region
      :v "C-/" #'comment-or-uncomment-region)

; Display time and battery in modeline
(display-time-mode 1)
(setq display-time-24hr-format 1)
(display-battery-mode 1)

(setq-default tab-width 2)

#+end_src

*** Random custom functions of mine
**** TODO Replace me/evil-insert-block with a structured template
See https://orgmode.org/manual/Structure-Templates.html

#+begin_src emacs-lisp
(defun me/backup-commit ()
  "Commit everything in the current repository in a commit called 'backup'."

  ;; We need to make this interactive to appear as part of M-x (evaluate-extended-command)
  ;; Otherwise it would only appear under M-: (eval-expression)
  ;; See https://stackoverflow.com/questions/29199807/why-are-some-emacs-functions-not-available-via-m-x for more detail
  (interactive)
  (if (y-or-n-p (format "Backup directory %s to git?" default-directory))
  (progn
    (shell-command "git add . && git commit -am 'backup' && git push origin")
    (message "Committed and pushed to origin!"))
  (progn
    (message "Ok - aborted"))))

(defun me/evil-insert-block (lang)
  (evil-open-below 1)
  (evil--self-insert-string (format"\#+BEGIN_SRC %s\n\#+END_SRC" lang))
  (evil-open-above 1))

(defun me/insert-block (lang)
    (insert (format "
        \#+BEGIN_SRC %s

        \#+END_SRC" lang)))

(defun me/insert-elisp-block ()
    "This function inserts a src block in org mode, in the language emacs lisp."
    (interactive)
    (if (eq major-mode 'org-mode)
        (with-current-buffer (current-buffer)
            (if (bound-and-true-p evil-org-mode) ;; bound-and-true-p is a macro - returns its value if set, or nil (which is sufficient for a conditional)
                (me/evil-insert-block "emacs-lisp")
                (me/insert-block "emacs-lisp")))
      (message "Not in org mode")))

; Modifications of this could be written for project specific stuff -eg search Jira, search gitlab etc
(defun me/lemme-google-that ()
  "Google for a user-input query.

   This uses the function add-to-history.
   If the variable history-delete-duplicates is nil, duplicates will NOT be deleted.
   The max history length is set by the variable history-length"
  (interactive)
  (defvar me/lemme-google-that-history '())
  (let ((input-query (completing-read "Search Google for: " me/lemme-google-that-history)))
    (add-to-history 'me/lemme-google-that-history input-query)
    (browse-url (format "https://google.com/search?q=%s" input-query))))

(map! :leader
      (:prefix "h"
       :desc "Google something" "g" #'me/lemme-google-that))

(defun me/evil-normalize-all-buffers ()
  "Force a drop to normal state.
Taken from https://emacs.stackexchange.com/questions/24563/evil-mode-switch-back-to-normal-mode-automatically-after-inaction"

  (unless (eq evil-state 'normal)
    (dolist (buffer (buffer-list))
      (set-buffer buffer)
      (unless (or (minibufferp)
                  (eq evil-state 'emacs))
        (evil-force-normal-state)))
    (message "Dropped back to normal state in all buffers")))

(defvar me/evil-normal-timer
  (run-with-idle-timer 10 t #'me/evil-normalize-all-buffers)
  "Drop back to normal state after idle for 10 seconds.")

(defun me/wsl-copy (start end)
  "Copy region to windows clipboard.
   Originally comes from an SO post - https://emacs.stackexchange.com/questions/39210/copy-paste-from-windows-clipboard-in-wsl-terminal/59607#59607"
  (interactive "r")
  (shell-command-on-region start end "clip.exe"))

;; Warn when using Esc instead of C-g
(defun me/warn-esc ()
  (interactive)
  "Warn me when I use Esc instead of C-g"

  (evil-force-normal-state)
  (message "Could you have used C-g ?"))

(map!
 :desc "Warn when using Esc instead of C-g"
 :i (kbd "<escape>") #'me/warn-esc)

#+end_src

** RSS Feeds

Consider adding +org to the doom init module for this.

#+BEGIN_SRC emacs-lisp
(after! elfeed
  (setq elfeed-search-filter "@6-months-ago +unread"))
;; Each item is a list of the form ("url" tag1 tag2)
;; A nice place to find more rss feeds is https://rss.feedspot.com/math_rss_feeds/
(setq elfeed-feeds '(
                     ("https://api.quantamagazine.org/feed/" quanta academic)
                     ("terrytao.wordpress.com/feed" maths puremath terrytao academic)
                     ("https://www.cambridgemaths.org/blogs/all-blogs/?utm_source=feedspot" maths academic)
                     ("thatsmaths.com/feed" maths academic)
                     ;; abstractalgebra tag added here is for some reason the filtering in elfeed filters on
                     ;; the url only, not the name of the feed (Abstract Algebra)...
                     ("ysharifi.wordpress.com/feed" maths academic puremath abstractalgebra)
                     ;; Blog of the awesome youtube channel Aleph0
                     ;; However this is explicitly not a maths blog...
                     ("blog.jpolak.org/feed/?feed=rss2" tech work)
                     ("http://feeds.hbr.org/harvardbusiness" hbr work)
                     ("https://anchor.fm/s/db87c75c/podcast/rss" curiousleader aaronbieber work leadership audio)
                     ("https://blog.aaronbieber.com/posts/index.xml" chronicle tech work)))

(add-hook! 'elfeed-search-mode-hook #'elfeed-update)
#+END_SRC
** Emacs lisp


#+BEGIN_SRC emacs-lisp
(map! :map evil-normal-state-map "D" nil)
(map!
 :desc "Eval last S-expression in insert mode and eval-defun in normal mode"
 ;; Note this is Super (windows key) (s) not Shift (S)
 :i "s-d" #'eval-last-sexp
 :n "s-d" #'eval-defun)
#+END_SRC


*** Unit testing help

#+BEGIN_SRC emacs-lisp
(defun me/run-elisp-tests-in-buffer ()
  "Evaluate the current buffer then run all unit tests in it."
  (interactive)
  (ert-delete-all-tests)
  (+eval/buffer-or-region)
  (ert t))
#+END_SRC
** Environment or machine specific stuff (keep at end of config)

*** Load machine specific stuff - should be run at or near the end of the file
#+begin_src emacs-lisp
;; Load machine specific stuff, if present. Specify a non nil second arg to prevent an error if not found
(load "~/tools/emacs-local.el" t)
#+end_src
** Minor mode(s) to use as yasnippet conditions
*** Linear Algebra

#+BEGIN_SRC emacs-lisp
(define-minor-mode me-linear-algebra-mode "A minor mode to use as a condition for certain yasnippet snippets")
#+END_SRC
